/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int cnt = 0;

        ListNode* temp = head;

        while(temp){
            cnt++;
            temp = temp->next;
        }

        int m = cnt - n + 1;

        if(m <= 0 || m > cnt) return head;

        cnt = 0;
        ListNode* temp2 = head;
        ListNode* prev = nullptr;
        while(temp2){
            cnt++;
            if(cnt == m) break;
            // need to check this condition before previos node copying temp2
            prev = temp2;
            temp2 = temp2->next;

        }

        if(prev == nullptr){
            head = head->next;
        
            delete temp2;

            return head;
        }

        prev->next = temp2->next;

        temp2->next = nullptr;
        delete temp2;

        return head;


    }
};
